#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys, getopt
import numpy as np
from scipy.io import netcdf
import copy

def disp_help():
	proname = (sys.argv[0]).strip().split('/')
	print ('This a pyhton template for converting a table with multiple data columns into a netcdf file.\n\
Author: Yi Zhang (zhangyi.cugwuhan@gmail.com)\n')
	print ('Usage: '+proname[-1]+' <infile> -o<outfile> [-f<format>] [-d<order>] [-r<xmin>/<xmax>/<ymin>/<ymax>] [-i<dx>/<dy>] [-j<head-record>] [-c<column1>,<column2>...] [-t<name>...] [-u<unit1>,<unit2>...] [-a<x-label>/<y-label>]\n\
-o --ofile\toutput grid file\'s name. a .nc extension will be add automaticly to ensure proper recognition\n\
-r --range\tdata area. default values are 0/1000/0/1000\n\
-i --interval\tdata spacing. default values are 10/10\n\
-j --jumphead\tskip head records, the default value is 0 which means no skiping. Note that this script will skip all lines start by # automaticly\n\
-c --column\tdata columns. the default value is 2 which represents the third column of a input table\n\
-t --title\tdata names. the default value will use the input table name\n\
-u --unit\tdata units. default value is data\n\
-a --axislabel\taxis unit labels. defaults are \'m\' and \'m\'\n\
-f --format\tthe start point of data. the default is lower-left corner. set -f to upper-left to change the start point\n\
-d --order\tdata arrangement order. the default order is x values change firstly then y values. set -d to -1 reserve the order\n\
-g --geoframe\tset if the data is under geographic/geocentric coordinates, this option will set dimensions in the ouput file into \'longitude\' and \'latitude\'\n\
-h --help\tshow this information')

def table2nc(infile,ofile,labels,dimens,lines,sline,ranges,interval,titles,units,formats,orders):
	filein = open(infile,'r')
	lineList = filein.readlines()
	# 默认忽略#号开头的行
	lineList_orig = copy.deepcopy(lineList)
	for line in lineList_orig:
		if line.startswith('#'):
			lineList.remove(line)
	lineList = [line.strip().split( ) for line in lineList[sline:]]
	filein.close()

	dValues = np.zeros((len(lineList),len(lines)))
	one_dValue = np.zeros((int((ranges[3]-ranges[2])/interval[1])+1,int((ranges[1]-ranges[0])/interval[0])+1))
	count = 0
	for l in map(int,lines):
		for h in range(len(lineList)):
			dValues[h][count] = float(lineList[h][l])
		count += 1

	fileout = netcdf.netcdf_file(ofile+'.nc','w')
	cmd_history = ''
	for c in range(len(sys.argv)):
		cmd_history += sys.argv[c] + " "
	fileout.history = "Generated by: " + cmd_history
	fileout.createDimension(dimens[0],int((ranges[1]-ranges[0])/interval[0])+1)
	fileout.createDimension(dimens[1],int((ranges[3]-ranges[2])/interval[1])+1)
	x = fileout.createVariable(dimens[0],'d',(dimens[0],))
	x.units = labels[0]
	y = fileout.createVariable(dimens[1],'d',(dimens[1],))
	y.units = labels[1]
	x[:] = np.linspace(ranges[0],ranges[1],int((ranges[1]-ranges[0])/interval[0])+1)
	y[:] = np.linspace(ranges[2],ranges[3],int((ranges[3]-ranges[2])/interval[1])+1)
	for l in range(len(lines)):
		d = fileout.createVariable(titles[l],'d',(dimens[1],dimens[0]))
		d.units = units[l]
		if formats == 'lower-left' and orders == 0:
			for i in range(int((ranges[3]-ranges[2])/interval[1])+1):
				for j in range(int((ranges[1]-ranges[0])/interval[0])+1):
					one_dValue[i][j] = dValues[i*(int((ranges[1]-ranges[0])/interval[0])+1)+j][l]
		elif formats == 'lower-left' and orders == -1:
			for j in range(int((ranges[1]-ranges[0])/interval[0])+1):
				for i in range(int((ranges[3]-ranges[2])/interval[1])+1):
					one_dValue[i][j] = dValues[j*(int((ranges[3]-ranges[2])/interval[1])+1)+i][l]
		elif formats == 'upper-left' and orders == 0:
			for i in range(int((ranges[3]-ranges[2])/interval[1])+1):
				for j in range(int((ranges[1]-ranges[0])/interval[0])+1):
					one_dValue[int((ranges[3]-ranges[2])/interval[1])-i][j] = dValues[i*(int((ranges[1]-ranges[0])/interval[0])+1)+j][l]
		elif formats == 'upper-left' and orders == -1:
			for j in range(int((ranges[1]-ranges[0])/interval[0])+1):
				for i in range(int((ranges[3]-ranges[2])/interval[1])+1):
					one_dValue[int((ranges[3]-ranges[2])/interval[1])-i][j] = dValues[j*(int((ranges[3]-ranges[2])/interval[1])+1)+i][l]
		else:
			for i in range(int((ranges[3]-ranges[2])/interval[1])+1):
				for j in range(int((ranges[1]-ranges[0])/interval[0])+1):
					one_dValue[i][j] = dValues[i*(int((ranges[1]-ranges[0])/interval[0])+1)+j][l]
		d[:] = one_dValue
	fileout.close()

def main(argv):
	inputFile = ''
	outputFile = ''
	startLine = 0
	dataLine = [2]
	dataRange = [0.0,1000.0,0.0,1000.0]
	dataInterval = [10.0,10.0]
	dataTitle = ''
	dataUnit = 'data'
	axisLabel = ['m','m']
	dataFormat = 'lower-left'
	dimenName = ['x-axis','y-axis']
	dataOrder = 0

	if len(sys.argv) == 1:
		print ('use -h option to see help information')
		sys.exit()
	# the first argument will allways be the input file name
	inputFile = sys.argv[1]

	try:
		opts, args = getopt.getopt(argv,"hgo:j:c:r:i:t:u:a:f:d:",["help","geoframe","ofile=","jumphead=","column=","range=","interval=","title=","unit=","axislabel=","format=","order="])
	except getopt.GetoptError:
		disp_help()
		sys.exit(2)
	for opt, arg in opts:
		if opt in ("-h","--help"):
			disp_help()
			sys.exit()
		elif opt in ("-g","--geoframe"):
			dimenName[0] = 'longitude'
			dimenName[1] = 'latitude'
			axisLabel[0] = 'degree'
			axisLabel[1] = 'degree'
		elif opt in ("-o","--ofile"):
			outputFile = arg
		elif opt in ("-f","--format"):
			dataFormat = arg
		elif opt in ("-j","--jumphead"):
			startLine = int(arg)
		elif opt in ("-c","--column"):
			dataLine = list(map(int,arg.strip().split(',')))
		elif opt in ("-d","--order"):
			dataOrder= int(arg)
		elif opt in ("-r","--range"):
			dataRange = list(map(float,arg.strip().split('/')))
		elif opt in ("-i","--interval"):
			dataInterval = list(map(float,arg.strip().split('/')))
		elif opt in ("-t","--title"):
			dataTitle = list(map(str,arg.strip().split(',')))
		elif opt in ("-u","--unit"):
			dataUnit = list(map(str,arg.strip().split(',')))
		elif opt in ("-a","--axislabel"):
			axislabel = list(map(str,arg.strip().split(',')))

	if inputFile == '':
		print('error: no input-file name')
		disp_help()
		sys.exit()

	if outputFile == '':
		print('error: no output-file name')
		disp_help()
		sys.exit()

	if dataTitle == '':
		dataTitle = inputFile

	table2nc(inputFile,outputFile,axisLabel,dimenName,dataLine,startLine,dataRange,dataInterval,dataTitle,dataUnit,dataFormat,dataOrder)

if __name__ == "__main__":
	main(sys.argv[2:])